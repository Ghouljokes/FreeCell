class Space:
    attributes:
        rect, cards

    create space(position)
        set rect at position
        set cards to []

    @property
    card:
        if not empty:
            return last card in self.cards

    add_card(card):
        card.set_base(self)
        self.cards.append(card)

    check_for_target(cursor location):
        if cursor in rect and cards not empty:
            return space.card


    draw(screen):
        draw rectangle
        if not empty:
            space.card.draw 

    remove_card(card):
        remove card from self.cards if card is there.

    valid_dest(card):
        return no card in space

class Foundation(space):

    draw(screen):
        for card in cards, starting from end:
            if card isn't held:
                card.draw(screen)
                return
        draw rectangle

    valid_dest(card):
        if card isn't stacked and card.piles_up(self.card):
            return True


class FreeCell(space):

    valid_dest(card):
        if card isn't stacked and no self.card:
            return super().get_valid_dest(card)

class StackSpace(space):
    attributes:
        parent_card, cards, rect

    create_space(card):
        set parent_card to card variable
        position is parent_card's topleft offset by the stack offset
        Space.__init__(position)

    def move(location):
        set rect to new location
        if card in space, move card along with space.

    def valid_dest(card):
        if card.stacks_down(self.parent_card) and space is empty:
            return True



class Tableau(Space):

    @property
    top_card:
        set highest_card to self.card
        if highest_card:
            while highest_card has card above it:
                set highest_card to above card
            return highest card

    @property
    top_space:
        if top_card:
            return top_card.space
        else:
            return else

    check_for_target:
        if cursor x within tableau x:
            target_card = self.top_card
            while target card:
                if cursor within card rect:
                    return card
                else:
                    target card = card.below_card

    stack_card(card):
        self.top_space.add_card(card)
    
