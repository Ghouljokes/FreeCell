class Space:
    attributes:
        rect, card

    is_empty:
        return if no card in space

    add_card(card):
        self.card = card
        set card's space as self

    check_for_target(cursor location):
        if cursor in rect and card in space:
            return card

    create space(position)
        set rect
        set card to None

    draw(screen):
        draw rectangle
        if card:
            card.draw 
    
    remove_card:
        set self.card to None

    valid_dest(card):
        return space.isempty and space intersects card***


class StackSpace(space):
    attributes:
        parent_card, card, rect

    create_space(card):
        set parent_card to card variable
        position is parent_card's topleft offset by the stack offset
        Space.__init__(position)

    def move(location):
        set rect to new location
        if card in space, move card along with space.


class Tableau(Space):

    
    check_for_target:
        if cursor x within tableau x:
            target_card = top_card
            while target card:
                if cursor within card rect:
                    return card
                else:
                    target card = card.below_card

    stack_card(card):
        if no card in space:
            do normal space add_card
        else:
            add card to the top card's stack space.

    top_card:
        if card:
            while card has card above it:
                move to next card and check that
            return highest card
    
    top_space:
        if no card:
            return self
        else:
            return top_card's stack space.
    
    valid_dest(card):
        return top_space.valid_dest(card)