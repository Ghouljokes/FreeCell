class Card(sprite):
    attributes:
        suit, value, image, rect, home_space, stack_space
    
    create card(suit, value, image):
        initialize the sprite super
        set suit, value, and image
        set rect based off of image
        set home_space to None for now
        set stack_space to StackSpace
        set anchor point to 0, 0
        set is_clicked to False

    @property
    above_card:
        return stack_space.card

    @property
    below_card:
        if home_space is a StackSpace:
            return home_space's parent card

    @property
    stack_base:
        lowest_card = self
        while lowest_card.below_card:
            lowest_card = lowest_card.below_card
        return lowest_card.home_space

    @property
    stack_size:
        set size to 1
        set check_card to self
        while check_card.above_card:
            size += 1
            check_card = above_card
        return size

    @property
    top_card:
        set highest to self
        while highest.above_card:
            set highest to above card
        return highest

    can_drop_off(space):
        if space is self.top_card.stack_space:
            return False
        return self.in_range(space)

    click(cursor_pos):
        self.set anchor point(cursor_pos)
        set is_clicked to True

    drag(cursor_pos):
        move anchor point to cursor pos

    draw:
        Draw card's sprite.
        if there are any cards on top of this one, draw that too.

    go_home:
        if home_space:
            self.move(home_space.rect.topleft)

    is_valid_stack:
        set checking_card to self
        while checking_card.above_card:
            if not above_card.stacks_downward(checking_card):
                return False
            checking_card = checking_card.above_card
        return True

    move(location):
        move rectangle to new location
        move stack_space to be offset down from rectangle's new location

    piles_up(card):
        if card is None, return if self value is Ace.
        Else, return card suit same as self suit and card value one less than self value.

    release(spaces):
        set is_clicked to False
        self.go_home

    set_anchor(cursor_pos):
        set the anchor point as coords relative to topleft

    set_base(space):
        remove card from old space
        set home_space to space

    stacks_downward(card):
        return self.color != card.color and self.value = card.value - 1

    switch_space(space):
        space.add_card(self)
        self.go_home




create_deck:
    initialize the deck as an empty list
    load spritesheet
    for suit in suits
        for value in range 1, 14:
            get sprite from sheet based off of suit and value
            append card to deck
    return deck

