class Card(sprite):
    attributes:
        suit, value, image, rect, home_space, stack_space
    
    create card(suit, value, image):
        initialize the sprite super
        set suit, value, and image
        set rect based off of image
        set home_space to None for now
        set stack_space to StackSpace
        set anchor point to 0, 0

    @property
    above_card:
        return stack_space.card

    @property
    below_card:
        if home_space is a StackSpace:
            return home_space's parent card

    center_on_point(location):
        set rectangle center to location
        card.move to new topleft corner

    drag(cursor_pos):
        move anchor point to cursor pos

    draw:
        Draw card's sprite.
        if there are any cards on top of this one, draw that too.

    get_clicked(cursor_pos):
        set anchor point
        remove card from home_space

    go_home:
        if home_space:
            self.move(home_space.rect.topleft)
            append self to home_space.cards

    move(location):
        move rectangle to new location
        move stack_space to be offset down from rectangle's new location

    set_anchor(cursor_pos):
        set the anchor point as coords relative to topleft

    set_base(space):
        remove card from old space
        set home_space to space
        card.go_home




create_deck:
    initialize the deck as an empty list
    load spritesheet
    for suit in suits
        for value in range 1, 14:
            get sprite from sheet based off of suit and value
            append card to deck
    return deck

