Game class:
    attributes:
        screen, spaces, held_card, last_click, moves, running

    __init__:
        set self._screen to self.create_screen()
        set self._foundation to self.create_foundation()
        set self.free_cells to self.create_free_cells()
        set self.tableau to self.create_tableau()
        set self._held_stack to None
        set self._last_click to now
        set self._moves to empty list
        set self._running to True
        set self._event_methods to dict {
            pygame.QUIT: self.quit, pygame.MOUSEBUTTONDOWN: self.handle_mouse_down, pygame.MOUSEBUTTONUP: self.handle_mouse_up,
            pygame.K_z: self.undo
        }

    @property
    empty_spaces:
        empty_count = 0
        for space in self._free_cells + self._tableau:
            if space.is_empty:
                increase empty_count by 1
        return empty_count

    @property
    sorted_tableau:
        return list of tableau spaces, sorted so non-empty ones come first.

    @property
    spaces:
        return self._foundations + self._free_cells + self._tableau

    auto_dest(stack):
        for space_list in [self._foundation, self.sorted_tableau self._free_cells]:
            set space to self.get_valid_space(stack, space_list)
            if space and space != stack.home_space:
                self.make_move(stack, space)
                return

    clear_hand:
        set self._held_stack to None

    click_stack(move_stack):
        set self._held_stack to move_stack
        move_stack.click(cursor_pos)

    create_foundations:
        set foundations to empty list
        x_pos is BUFFER_SIZE
        for i in range 4:
            create Foundation object at location x_pos, BUFFER_SIZE, index i
            append foundation to foundations list
            add card width + BUFFER_SIZE to x_pos
        return foundations

    create_free_cells:
        set free_cells to empty list
        x_pos is screen.width - (card width + BUFFER_SIZE)
        for i in range(4):
            create FreeCell object at location x_pos, BUFFER_SIZE, index i
            add free cell to beginning of free cells list
            subtract (card width + BUFFER_SIZE) from x_pos
        return free_cells

    create_screen:
        set screen to pygame.display.set_mode((450, 500))
        set caption to "Freecell"
        return screen

    create_tableau:
        get center coordinate of screen
        x_pos = center minus (3.5x buffer size + 4x card width)
        y_pos = 120
        tableaus = []
        for i in range(8):
            create Tableau at x_pos, y_pos, index i
            append tab to tableaus
            add card width + BUFFER_SIZE to x_pos
        return tableaus

    deal_cards:
        create deck
        shuffle deck
        for i in range 8:
            tab = self.tableau[i]
            stack_length = 6 + i < 4
            make Stack with home_space tab from first stack_length cards in deck 
            remove those cards from the deck
            stack.go_home()

    draw:
        clear screen
        for space in self.spaces:
            space.draw(self._screen)
        if held_stack:
            held_stack.draw(self._screen)
        update screen.

    get_mouse_target:
        get cursor_pos
        for space in self.spaces:
            target = space.check_for_target(cursor_pos)
            if target:
                return target

    get_release_dest:
        for space in self.spaces:
            if space.is_valid_drop_point(self._held_stack) and 
            self.room_for_move(self._held_stack, space):
                return space
        return None

    get_valid_space(stack, spaces):
        for space in spaces:
            if self.room_for_move(stack, space) and space.valid_dest(stack):
                return space
        return None

    handle_click_release:
        if self._held_stack:
            dest = self.auto_dest(self._held_stack)
            if dest:
                self.make_move(self._held_stack, dest)
            else:
                self._held_stack.go_home()
            self.clear_hand()

    handle_events:
        for event in pygame.event.get():
            self.handle_event(event)

    handle_event(event):
        if event.type = pygame.KEYDOWN:
            event_key = event.key
        else:
            event_key = event.type
        if event_key in self.event_methods:
            method = self.event_methods[event_key]
            method()

    handle_hold_release:
        if self._held_stack:
            dest = self.get_release_dest()
            if dest:
                self.make_move(self._held_stack, dest)
            else:
                self._held_stack.go_home()
            self.clear_hand()        

    handle_mouse_down:
        set self._last_click to now
        target_stack = self.get_mouse_target()
        if target:
            self.click_stack(target)

    handle_mouse_up:
        time_between is now - self._last_click_time
        if time_between <= CLICKRELEASETIME:
            self.handle_click_release()
        else:
            self.handle_hold_release()

    make_move(stack, space):
        set move_dict to stack.make_move(space)
        append move_dict to self.moves

    quit:
        set self._running to False

    room_for_move(stack, space):
        max_stack_length = self.empty_spaces
        if stack.home_space.is_empty:
            max_stack_length -= 1
        if not space.is_empty:
            max_stack_length += 1
        return stack.length <= max_stack_length

    run:
        self.set_up_game()
        while self._running:
            self.tick()

    set_up_game:
        self.deal_cards()

    tick:
        self.draw()
        self.handle_events():
        self.update():

    undo:
        if self.move_list has moves:
            take card, dest, and source from last move in list
            undo_stack = dest.cards.make_stack(card)
            undo_stack.make_move(source)
            remove last move from move_list

    update:
        if self._held_stack:
            stack.drag to mouse location
